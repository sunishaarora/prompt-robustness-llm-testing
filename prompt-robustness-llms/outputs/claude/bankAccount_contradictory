class BankException:
    """Base class for all banking exceptions."""
    def __init__(self, message):
        self.message = message
    
    def __str__(self):
        return self.message


class InsufficientFundsException(BankException):
    """Exception for when a withdrawal exceeds account balance."""
    def __init__(self, amount, balance):
        super().__init__(f"Insufficient funds: Cannot withdraw ${amount:.2f} from balance of ${balance:.2f}")
        self.amount = amount
        self.balance = balance


class NegativeAmountException(BankException):
    """Exception for when a negative amount is provided."""
    def __init__(self, operation):
        super().__init__(f"{operation} amount must be positive")


class AccountNotFoundException(BankException):
    """Exception for when an account is not found."""
    def __init__(self, account_number):
        super().__init__(f"Account #{account_number} not found")


class ExceptionHandler:
    """Custom exception handler to mimic try-except behavior."""
    
    @staticmethod
    def try_operation(operation, *args, **kwargs):
        """
        Execute an operation that might raise an exception.
        
        Args:
            operation: Function to execute
            *args, **kwargs: Arguments to pass to the function
            
        Returns:
            tuple: (result, exception)
                - If successful: (result, None)
                - If exception: (None, exception)
        """
        result = operation(*args, **kwargs)
        
        # Check if result is an exception
        if isinstance(result, BankException):
            return (None, result)
        
        return (result, None)


class BankAccount:
    """A bank account that uses custom exception handling."""
    
    def __init__(self, account_number, owner_name, initial_balance=0.0):
        self.account_number = account_number
        self.owner_name = owner_name
        self._balance = initial_balance
        self.transaction_history = []
    
    @property
    def balance(self):
        return self._balance
    
    def deposit(self, amount):
        """Deposit money, returning an exception object if there's an error."""
        if amount <= 0:
            return NegativeAmountException("Deposit")
        
        self._balance += amount
        self.transaction_history.append(f"Deposit: +${amount:.2f}")
        return self._balance
    
    def withdraw(self, amount):
        """Withdraw money, returning an exception object if there's an error."""
        if amount <= 0:
            return NegativeAmountException("Withdrawal")
        
        if amount > self._balance:
            return InsufficientFundsException(amount, self._balance)
        
        self._balance -= amount
        self.transaction_history.append(f"Withdrawal: -${amount:.2f}")
        return self._balance
    
    def get_transaction_history(self):
        return self.transaction_history
    
    def __str__(self):
        return f"Account #{self.account_number} | Owner: {self.owner_name} | Balance: ${self._balance:.2f}"


class Bank:
    """A bank that manages multiple accounts using custom exception handling."""
    
    def __init__(self, name):
        self.name = name
        self.accounts = {}
        self.next_account_number = 1001
        self.handler = ExceptionHandler()
    
    def create_account(self, owner_name, initial_balance=0.0):
        if initial_balance < 0:
            return (None, NegativeAmountException("Initial balance"))
        
        account_number = str(self.next_account_number)
        self.next_account_number += 1
        
        new_account = BankAccount(account_number, owner_name, initial_balance)
        self.accounts[account_number] = new_account
        
        return (new_account, None)
    
    def get_account(self, account_number):
        if account_number not in self.accounts:
            return (None, AccountNotFoundException(account_number))
        
        return (self.accounts[account_number], None)
    
    def transfer(self, from_account_number, to_account_number, amount):
        # Get source account
        account_result, exception = self.get_account(from_account_number)
        if exception:
            return (False, f"Source account error: {exception}")
        from_account = account_result
        
        # Get destination account
        account_result, exception = self.get_account(to_account_number)
        if exception:
            return (False, f"Destination account error: {exception}")
        to_account = account_result
        
        # Withdraw from source
        result, exception = self.handler.try_operation(from_account.withdraw, amount)
        if exception:
            return (False, f"Transfer failed: {exception}")
        
        # Deposit to destination
        result, exception = self.handler.try_operation(to_account.deposit, amount)
        if exception:
            # Rollback the withdrawal
            from_account.deposit(amount)
            return (False, f"Transfer failed: {exception}")
        
        # Record the transfer in transaction history
        from_account.transaction_history.append(f"Transfer to #{to_account_number}: -${amount:.2f}")
        to_account.transaction_history.append(f"Transfer from #{from_account_number}: +${amount:.2f}")
        
        return (True, f"Successfully transferred ${amount:.2f} from account #{from_account_number} to account #{to_account_number}")
    
    def list_accounts(self):
        return list(self.accounts.values())


# Helper functions to demonstrate the custom exception handling
def handle_deposit(account, amount):
    """Process a deposit with custom exception handling."""
    print(f"Attempting to deposit ${amount:.2f}...")
    
    result, exception = ExceptionHandler.try_operation(account.deposit, amount)
    
    if exception:
        print(f"Error: {exception}")
        return False
    
    print(f"Deposit successful. New balance: ${result:.2f}")
    return True


def handle_withdrawal(account, amount):
    """Process a withdrawal with custom exception handling."""
    print(f"Attempting to withdraw ${amount:.2f}...")
    
    result, exception = ExceptionHandler.try_operation(account.withdraw, amount)
    
    if exception:
        if isinstance(exception, InsufficientFundsException):
            print(f"Error: {exception}")
            print(f"Available balance: ${exception.balance:.2f}")
        else:
            print(f"Error: {exception}")
        return False
    
    print(f"Withdrawal successful. New balance: ${result:.2f}")
    return True

# Here's how to use this custom exception handling system:
# Create a bank and account
bank = Bank("Community Bank")
account, exception = bank.create_account("John Doe", 1000.00)

if exception:
    print(f"Error creating account: {exception}")
else:
    print(f"Account created: {account}")

# Demonstrate successful operations
handle_deposit(account,.50)     # Successful deposit
handle_withdrawal(account, 300.00)  # Successful withdrawal

# Demonstrate operations that throw exceptions
handle_deposit(account, -50.00)     # Error: negative amount
handle_withdrawal(account, 2000.00) # Error: insufficient funds

# Create another account and do a transfer
second_account, exception = bank.create_account("Jane Smith", 500.00)
success, message = bank.transfer(account.account_number, second_account.account_number, 200.00)
print(message)

# Show transaction history
print("\nTransaction History for John:")
for transaction in account.get_transaction_history():
    print(f"- {transaction}")

print("\nTransaction History for Jane:")
for transaction in second_account.get_transaction_history():
    print(f"- {transaction}")
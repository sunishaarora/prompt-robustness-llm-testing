def validate_credentials(username, password):
    """
    Validates a username and password without using regex.
    
    Username requirements:
    - Must be at least 3 characters long
    - Can only contain alphanumeric characters, underscores, and hyphens
    
    Password requirements:
    - Must be at least 8 characters long
    - Must contain at least one number
    - Must contain at least one special character
    
    Args:
        username (str): The username to validate
        password (str): The password to validate
        
    Returns:
        tuple: (is_valid, message) where:
            - is_valid (bool): True if credentials are valid, False otherwise
            - message (str): Validation message or error
    """
    # Input type validation
    if not isinstance(username, str) or not isinstance(password, str):
        return False, "Username and password must be strings"
    
    # Username validation
    if len(username) < 3:
        return False, "Username must be at least 3 characters long"
    
    if len(username) > 32:
        return False, "Username cannot exceed 32 characters"
    
    # Check username characters
    valid_username_chars = set('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-')
    if not all(char in valid_username_chars for char in username):
        return False, "Username can only contain letters, numbers, underscores and hyphens"
    
    # Password validation
    if len(password) < 8:
        return False, "Password must be at least 8 characters long"
    
    if len(password) > 128:
        return False, "Password length exceeds maximum allowed"
    
    # Check password complexity
    has_uppercase = False
    has_lowercase = False
    has_digit = False
    has_special = False
    
    special_chars = set('!@#$%^&*(),.?":{}|<>')
    
    for char in password:
        if char.isupper():
            has_uppercase = True
        elif char.islower():
            has_lowercase = True
        elif char.isdigit():
            has_digit = True
        elif char in special_chars:
            has_special = True
    
    if not has_uppercase:
        return False, "Password must contain at least one uppercase letter"
    
    if not has_lowercase:
        return False, "Password must contain at least one lowercase letter"
    
    if not has_digit:
        return False, "Password must contain at least one digit"
    
    if not has_special:
        return False, "Password must contain at least one special character"
    
    # Check for common passwords (simplified example)
    common_passwords = ['password', 'password123', '12345678', 'qwerty123']
    if password.lower() in common_passwords:
        return False, "Password is too common"
    
    # All checks passed
    return True, "Credentials are valid"


# Example usage
def main():
    # Test cases
    test_cases = [
        ("user", "Password1!"),  # Username too short
        ("user123", "pass"),     # Password too short
        ("user@123", "Password1!"),  # Invalid username character
        ("valid_user", "password123"),  # No special character
        ("valid-user", "PASSWORD123!"),  # No lowercase
        ("valid_user123", "password!"),  # No digit
        ("valid_user", "password!"),     # No uppercase
        ("valid_user", "Password1!")     # Valid credentials
    ]
    
    for username, password in test_cases:
        is_valid, message = validate_credentials(username, password)
        print(f"Username: {username}, Password: {password}")
        print(f"Valid: {is_valid}, Message: {message}")
        print("-" * 50)


if __name__ == "__main__":
    main()
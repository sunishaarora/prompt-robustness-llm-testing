class BankAccount:
    """A simple banking account class."""

    def __init__(self, account_holder, initial_balance=0):
        """
        Initializes a new BankAccount.

        Args:
            account_holder (str): The name of the account holder.
            initial_balance (float, optional): The starting balance. Defaults to 0.
        """
        if initial_balance < 0:
            raise ValueError("Initial balance cannot be negative.")
        self.account_holder = account_holder
        self.balance = initial_balance

    def deposit(self, amount):
        """
        Deposits money into the account.

        Args:
            amount (float): The amount to deposit.

        Raises:
            ValueError: If the amount is not positive.
        """
        if amount <= 0:
            raise ValueError("Deposit amount must be positive.")
        self.balance += amount
        return self.balance

    def withdraw(self, amount):
        """
        Withdraws money from the account.

        Args:
            amount (float): The amount to withdraw.

        Raises:
            ValueError: If the amount is not positive or exceeds the balance.
        """
        if amount <= 0:
            raise ValueError("Withdrawal amount must be positive.")
        if amount > self.balance:
            raise ValueError("Insufficient funds.")
        self.balance -= amount
        return self.balance

    def get_balance(self):
        """Returns the current balance of the account."""
        return self.balance

    def __str__(self):
        """Returns a string representation of the account."""
        return f"{self.account_holder}'s account: ${self.balance:.2f}"

# Example usage:
try:
    account = BankAccount("Alice", 100)
    print(account)

    account.deposit(50)
    print(f"New balance: ${account.get_balance():.2f}")

    account.withdraw(200)  # This will raise a ValueError
except ValueError as e:
    print(f"Error: {e}")

try:
  account2 = BankAccount("Bob", -100) #This will raise a ValueError
except ValueError as e:
  print(f"Error: {e}")

try:
  account.deposit(-10) #This will raise a ValueError
except ValueError as e:
  print(f"Error: {e}")
# factorial_module.py

def factorial(n):
    if n < 0:
        raise ValueError("Factorial is not defined for negative numbers")
    if n in (0, 1):
        return 1
    return n * factorial(n - 1)

# test_factorial_no_assertions.py

import unittest
from factorial_module import factorial

class TestFactorial(unittest.TestCase):

    def test_factorial_zero(self):
        result = factorial(0)
        if result != 1:
            raise Exception(f"Expected 1, got {result}")
        print("test_factorial_zero passed")

    def test_factorial_one(self):
        result = factorial(1)
        if result != 1:
            raise Exception(f"Expected 1, got {result}")
        print("test_factorial_one passed")

    def test_factorial_positive(self):
        expected = {3: 6, 5: 120, 7: 5040}
        for n, expected_result in expected.items():
            result = factorial(n)
            if result != expected_result:
                raise Exception(f"Expected {expected_result}, got {result} for n={n}")
        print("test_factorial_positive passed")

    def test_factorial_negative(self):
        try:
            factorial(-2)
        except ValueError:
            print("test_factorial_negative passed")
            return
        raise Exception("Expected ValueError for negative input")

if __name__ == '__main__':
    unittest.main()

# To run: python test_factorial_no_assertions.py
import re
import secrets
import string

def is_valid_username(username: str) -> bool:
    """
    Validates a username based on common criteria.

    Args:
        username: The username to validate.

    Returns:
        True if the username is valid, False otherwise.
    """
    if not isinstance(username, str):
        return False

    if not username:
        return False

    # Example: Allow alphanumeric characters and underscores, minimum length 3.
    username_regex = r"^[a-zA-Z0-9_]{3,}$"
    return bool(re.match(username_regex, username))


def is_valid_password(password: str) -> bool:
    """
    Validates a password based on strong password criteria.

    Args:
        password: The password to validate.

    Returns:
        True if the password is valid, False otherwise.
    """
    if not isinstance(password, str):
        return False

    if not password:
        return False

    # Strong password requirements:
    # - At least 12 characters long (adjust as needed).
    # - At least one uppercase letter.
    # - At least one lowercase letter.
    # - At least one digit.
    # - At least one special character.
    password_regex = r"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{12,}$"
    return bool(re.match(password_regex, password))

def generate_strong_password(length: int = 16) -> str:
    """
    Generates a cryptographically secure, strong password.

    Args:
        length: The desired length of the password.

    Returns:
        A strong password string.
    """
    if length < 12:
        raise ValueError("Password length must be at least 12 characters.")

    alphabet = string.ascii_letters + string.digits + "@$!%*?&"
    return ''.join(secrets.choice(alphabet) for i in range(length))

# Example usage with good practices.
username = "my_user1"
password = "StrongP@sswOrd123"
bad_password = "weak"
bad_username = ""

print(f"Username '{username}' valid: {is_valid_username(username)}")
print(f"Password '{password}' valid: {is_valid_password(password)}")
print(f"Invalid username '{bad_username}' valid: {is_valid_username(bad_username)}")
print(f"Invalid password '{bad_password}' valid: {is_valid_password(bad_password)}")

# Generating a strong password
new_password = generate_strong_password()
print(f"Generated password: {new_password}")

# Type checking example
print(f"Invalid password type example: {is_valid_password(123)}")
print(f"Invalid username type example: {is_valid_username(123)}")
import unittest

def factorial(n):
    """Calculates the factorial of a non-negative integer."""
    if n < 0:
        raise ValueError("Factorial is not defined for negative numbers")
    if n == 0:
        return 1
    else:
        result = 1
        for i in range(1, n + 1):
            result *= i
        return result

class TestFactorial(unittest.TestCase):

    def test_factorial_zero(self):
        result = factorial(0)
        if result != 1:
            self.fail(f"factorial(0) returned {result}, expected 1")

    def test_factorial_positive(self):
        results = [factorial(1), factorial(5), factorial(10)]
        expected = [1, 120, 3628800]
        for i, result in enumerate(results):
            if result != expected[i]:
                self.fail(f"factorial({[1,5,10][i]}) returned {result}, expected {expected[i]}")

    def test_factorial_negative(self):
        try:
            factorial(-1)
            self.fail("factorial(-1) did not raise ValueError")
        except ValueError:
            pass #test passed if ValueError is raised

        try:
            factorial(-5)
            self.fail("factorial(-5) did not raise ValueError")
        except ValueError:
            pass #test passed if ValueError is raised

    def test_factorial_large_number(self):
        result = factorial(12)
        if result != 479001600:
            self.fail(f"factorial(12) returned {result}, expected 479001600")

if __name__ == '__main__':
    unittest.main()
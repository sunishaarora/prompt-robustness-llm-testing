def validate_password_no_regex(password):
    """
    Validates a password without using regular expressions, but implements the
    same logic as a common strong password regex.

    Args:
        password: The password to validate.

    Returns:
        True if the password is valid, False otherwise.
    """

    if not isinstance(password, str):
      return False

    if not password:
        return False

    if len(password) < 8:
        return False

    has_upper = False
    has_lower = False
    has_digit = False
    has_special = False

    special_chars = "@$!%*#?&"

    for char in password:
        if char.isupper():
            has_upper = True
        elif char.islower():
            has_lower = True
        elif char.isdigit():
            has_digit = True
        elif char in special_chars:
            has_special = True

    if not (has_upper and has_lower and has_digit and has_special):
        return False

    return True

# Example Usage
print(validate_password_no_regex("P@ssword123"))  # True
print(validate_password_no_regex("password"))     # False
print(validate_password_no_regex("PASSWORD"))     # False
print(validate_password_no_regex("12345678"))     # False
print(validate_password_no_regex("P@ssword"))     # False
print(validate_password_no_regex(123)) #False
import unittest

def perform_math(number, operation):
    """Performs mathematical operations on a number."""
    if not isinstance(number, (int, float)):
        raise TypeError("Input number must be an integer or float.")

    if operation == "square":
        return number * number
    elif operation == "cube":
        return number * number * number
    elif operation == "double":
        return number * 2
    elif operation == "half":
        return number / 2
    else:
        raise ValueError("Invalid operation. Supported operations: square, cube, double, half")

class TestPerformMath(unittest.TestCase):

    def test_valid_operations(self):
        self.assertEqual(perform_math(5, "square"), 25)
        self.assertEqual(perform_math(3, "cube"), 27)
        self.assertEqual(perform_math(10, "double"), 20)
        self.assertEqual(perform_math(8, "half"), 4)
        self.assertEqual(perform_math(1.5, "square"), 2.25) #test floats

    def test_invalid_operation(self):
        with self.assertRaises(ValueError):
            perform_math(5, "multiply")

    def test_invalid_input_type(self):
        with self.assertRaises(TypeError):
            perform_math("hello", "square")
        with self.assertRaises(TypeError):
            perform_math([1,2,3], "cube")

    def test_edge_cases(self):
        self.assertEqual(perform_math(0, "square"), 0)
        self.assertEqual(perform_math(-2, "cube"), -8)
        self.assertEqual(perform_math(0, "half"), 0)
        self.assertEqual(perform_math(-1.5, "double"), -3.0)

if __name__ == '__main__':
    unittest.main()
class BankAccount:
    """A simple banking account class without try-except."""

    def __init__(self, account_holder, initial_balance=0):
        """Initializes a new BankAccount."""
        if initial_balance < 0:
            raise ValueError("Initial balance cannot be negative.")
        self.account_holder = account_holder
        self.balance = initial_balance

    def deposit(self, amount):
        """Deposits money into the account."""
        if amount <= 0:
            return "Error: Deposit amount must be positive."
        self.balance += amount
        return self.balance

    def withdraw(self, amount):
        """Withdraws money from the account."""
        if amount <= 0:
            return "Error: Withdrawal amount must be positive."
        if amount > self.balance:
            return "Error: Insufficient funds."
        self.balance -= amount
        return self.balance

    def get_balance(self):
        """Returns the current balance of the account."""
        return self.balance

    def __str__(self):
        """Returns a string representation of the account."""
        return f"{self.account_holder}'s account: ${self.balance:.2f}"


# Example usage:
account = BankAccount("Alice", 100)
print(account)

result = account.deposit(50)
if isinstance(result, str):
    print(result)  # Print error message
else:
    print(f"New balance: ${result:.2f}")

result = account.withdraw(200)
if isinstance(result, str):
    print(result)  # Print error message
else:
    print(f"New balance: ${result:.2f}")

result = account.deposit(-10)
if isinstance(result, str):
    print(result)

account2 = BankAccount("Bob", 100)
result = account2.withdraw(50)
if isinstance(result, str):
    print(result)
else:
    print(f"New balance: ${result:.2f}")
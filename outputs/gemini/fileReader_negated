import os

def read_file_without_open(filepath):
    """
    Reads a file without using Python's built-in open() function.

    Args:
        filepath (str): The path to the file.
    """
    try:
        fd = os.open(filepath, os.O_RDONLY)  # Open the file using os.open
        file_contents = b""  # Initialize an empty bytes object
        buffer_size = 1024  # Read in chunks
        while True:
            buffer = os.read(fd, buffer_size)
            if not buffer:
                break  # End of file
            file_contents += buffer
        os.close(fd)  # Close the file descriptor
        decoded_contents = file_contents.decode('utf-8') # Decode the bytes object
        lines = decoded_contents.splitlines() # split into lines
        for line in lines:
          print(line)

    except FileNotFoundError:
        print(f"Error: File not found at '{filepath}'")
    except OSError as e:
        print(f"An OS error occurred: {e}")
    except UnicodeDecodeError:
        print("Error: Could not decode file contents.")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")

# Example usage (assuming 'my_file.txt' exists):
def create_test_file(filepath, content):
    with open(filepath, 'w') as f:
        f.write(content)

test_file_path = "my_file.txt"
test_file_content = "Line 1\nLine 2\nLine 3"
create_test_file(test_file_path, test_file_content)

read_file_without_open(test_file_path)

#Example of a file that does not exist.
#read_file_without_open("does_not_exist.txt")
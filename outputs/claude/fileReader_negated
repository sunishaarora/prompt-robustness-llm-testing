import os

def read_file_without_open(file_path):
    try:
        # Open file using os.open
        # os.O_RDONLY: Open for reading only
        file_descriptor = os.open(file_path, os.O_RDONLY)
        
        file_contents = []
        buffer = bytearray(1024)  # Create a buffer for reading
        
        # Read the file in chunks
        while True:
            bytes_read = os.read(file_descriptor, 1024)
            if not bytes_read:  # If we've reached the end of the file
                break
                
            # Decode bytes to string and split by newlines
            text = bytes_read.decode('utf-8')
            lines = text.split('\n')
            
            # If this isn't the first chunk and we have contents, 
            # the first line might be a continuation of the last line from previous chunk
            if file_contents and lines[0]:
                file_contents[-1] += lines[0]
                lines = lines[1:]
                
            # Add all complete lines to our contents
            file_contents.extend(lines)
            
            # Print each line
            for line in lines:
                print(line)
                
        # Close the file descriptor
        os.close(file_descriptor)
        
        # Return the file contents
        return file_contents
        
    except FileNotFoundError:
        print(f"Error: The file '{file_path}' was not found.")
        return None
    except Exception as e:
        print(f"Error: {e}")
        return None

# Example usage
# contents = read_file_without_open("example.txt")